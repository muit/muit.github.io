<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>serialization on Miguel Fernandez Arce</title><link>https://muit.xyz/drafts/series/serialization/</link><description>Recent content in serialization on Miguel Fernandez Arce</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>&lt;a href="https://github.com/muit" rel="noopener">Miguel Fernandez Arce&lt;/a></copyright><lastBuildDate>Sat, 30 Apr 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://muit.xyz/drafts/series/serialization/index.xml" rel="self" type="application/rss+xml"/><item><title>Text and Binary serialization at once</title><link>https://muit.xyz/drafts/posts/text-and-binary-at-once/</link><pubDate>Sat, 30 Apr 2022 00:00:00 +0000</pubDate><guid>https://muit.xyz/drafts/posts/text-and-binary-at-once/</guid><description>You see, I like to spend my free time building a programming language called [**Rift**](https://github.com/PipeRift/rift). This surely wasn&amp;rsquo;t ambitious enough, so early on I designed it to be based on data files.
This basically means code files are not saved as text, but stored as data in some format like json or binary, and interpreted by an editor/compiler later. Of course, there are many advantages and some disadvantages to this approach, but I will only focus on the serialization aspect of it today.</description></item></channel></rss>