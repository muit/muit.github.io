<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Miguel Fernandez</title><link>https://muit.tech/</link><description>Recent content on Miguel Fernandez</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&lt;a href="https://github.com/muit" rel="noopener">Miguel Fernandez Arce&lt;/a></copyright><lastBuildDate>Tue, 30 Mar 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://muit.tech/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction to allocators and arenas</title><link>https://muit.tech/posts/2021/03/introduction-to-allocators-and-arenas/</link><pubDate>Tue, 30 Mar 2021 00:00:00 +0000</pubDate><guid>https://muit.tech/posts/2021/03/introduction-to-allocators-and-arenas/</guid><description>Lately, I have been playing around with the implementation of custom allocators and arenas to replace native allocations on my C++ projects.
Wow! Stop right there, Miguel. This line already deserves some introductions! Let&amp;rsquo;s talk about allocators.
Crash course on allocations To keep this brief, I will assume that we have some experience with C++ and heap allocation (malloc and new).
An allocation is when we request a pointer to a block of memory of a specified size.</description></item><item><title>About</title><link>https://muit.tech/about/</link><pubDate>Sun, 28 Mar 2021 00:00:00 +0000</pubDate><guid>https://muit.tech/about/</guid><description>Hi!
I&amp;rsquo;m Miguel, also known as muit.
The majority of my work is centered around the design and implementation of videogame systems and tools in C++. If you like to code, stick around and have a look!
Most of my projects are open-source and can be found at Piperift. Currently working at Ubisoft, previously EA DICE and Splash Damage.</description></item></channel></rss>